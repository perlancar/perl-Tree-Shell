#!perl

# AUTHORITY
# DATE
# DIST
# VERSION

use 5.010001;
use strict;
use warnings;

use Tree::Shell;

my $shell = Tree::Shell->new;

$shell->cmdloop;

1;
# ABSTRACT: Navigate and manipulate in-memory tree objects using a CLI shell
# PODNAME:

=head1 SYNOPSIS

 % treesh --help
 % treesh [opts]

 treesh> _

Load a tree object (from a JSON file):

 treesh> load --as bookstore --driver json --source /home/budi/bookstore.json
 treesh> load bookstore json /home/budi/bookstore.json

Load another tree object (from an Org document):

 treesh> load todo org /home/budi/todo.org

Load with some options:

 treesh> load todo org /home/budi/todo.org --opt NAME=VAL ...

See loaded objects:

 treesh> objects
 +-----------+--------+---------------------------+-----+
 | name      | driver | source                    | cwd |
 +-----------+--------+---------------------------+-----+
 | bookstore | json   | /home/budi/bookstore.json | /   |
 | todo      | org    | /home/budi/todo.org       | /   |
 +-----------+--------+---------------------------+-----+

Dump a loaded object:

 treesh> dump bookstore
 ...

Browse top-level children of a tree object:

 treesh> setobj todo
 treesh> ls -l
 ...

or:

 treesh> ls -l --obj todo
 ...

Change "directory" to view another part of the tree (from hereon, please
remember that you can set the object you want to work with with C<setobj>
command first, or specify the name of the object using C<--object> option):

 treesh> cd /Foo
 treesh> ls -l

Removing nodes of a tree object:

 treesh> rm Todo*

Reload an object from file (reverting all modifications):

 treesh> reload todo

Save a loaded object to file:

 treesh> save todo

Save a loaded object to another file:

 treesh> save todo /home/budi/todo-new.org


=head1 DESCRIPTION

This utility lets you navigate and manipulate in-memory tree objects. You can
load data structures like JSON and YAML, as well as other kinds of document like
Org, Perl code (PPI), and HTML, as tree objects. You can then browse the tree as
if it were a filesystem, using command like C<cd> and C<ls>. You can prune
nodes, add/modify nodes, as well as move/copy nodes around. You can save the
changes back to file.


=head1 OPTIONS

=over

=item * --help-, -h, -?

Show short help message and exit.

=item * --version, -v

Show version and exit.


=head1 COMMANDS

=head2 cd

Usage:

 cd [--object=NAME] [path]

Change directory of a loaded object. If C<path> is omitted, it's assumed to be
C</>.

=head2 exit

=head2 help

Usage:

 help [command]

Display help message.

=head2 objects

Show the loaded objects.

=head2 pwd

Print the current directory for each loaded objects. Currently the same as
L</objects>.

=head2 ls

Usage:

 ls [-l] [--object=NAME] [path ...]

List children of a node. If C<path> is omitted, will default to the current
working directory of the object.

=head2 set

Usage:

 set [name] [value]

If invoked without any argument, will list all known settings. If C<name> is
specified but C<value> is not, will show value for that particular setting. If
C<name> and C<value> is both specified, will set a setting's value.

=head2 setobj

Usage:

 setobj <name>

Set the current object to C<name>.


=head1 SETTINGS

Settings are configuration and regulate how the shell behaves.

=head2 output_format => str (default: C<text>)

Set output format for command results. The same formatting is used by
L<Perinci::CmdLine>. See that module or L<Perinci::Result::Format> for more
details.

=head2 debug_completion => bool (default: 0)

Whether to show debugging information when doing tab completion.

=head2 debug_time_command => bool (default: 0)

Whether to show how long a command takes.


=head1 FAQ

=head2 The prompt looks rather garbled (e.g. extra " m >" character)!

It looks to be an issue with L<Term::ReadLine::Perl>. Try installing
L<Term::ReadLine::Gnu> instead.

=head2 How do I redirect output of command to files?

B<treesh> is meant to be a simple shell, not a full-blown Unix shell. So this
feature is currently not implemented.

=head2 What about variables, aliases, looping, or $other_Unix_shell_feature?

Again, B<treesh> is meant to be a simple shell, not a full-blown Unix shell. So
those features are currently not implemented.


=head1 ENVIRONMENT

=head2 TREESH_HISTFILE => str (default: C<~/.treesh_history>)

Specify location of command history file. Like in shells, can be set to empty
string to disable history loading/saving.

=head2 TREESHRC => str (default: C<~/.treeshrc>)

Specify location of settings file.


=head1 FILES

=head2 C<~/.treesh_history>

Command history file.

=head2 C<~/.treeshrc>

Settings file (L<IOD> format).
